if getgenv()["Animator"]==nil then local a={}a.ClassName="Maid"function a.new()return setmetatable({_tasks={}},a)end;function a.isMaid(b)return type(b)=="table"and b.ClassName=="Maid"end;function a:__index(c)if a[c]then return a[c]else return self._tasks[c]end end;function a:__newindex(c,d)if a[c]~=nil then error(("'%s' is reserved"):format(tostring(c)),2)end;local e=self._tasks;local f=e[c]if f==d then return end;e[c]=d;if f then if type(f)=="function"then f()elseif typeof(f)=="RBXScriptConnection"then f:Disconnect()elseif f.Destroy then f:Destroy()end end end;function a:GiveTask(g)if not g then error("Task cannot be false or nil",2)end;local h=#self._tasks+1;self[h]=g;if type(g)=="table"and not g.Destroy then warn("[Maid.GiveTask] - Gave table task without .Destroy\n\n"..debug.traceback())end;return h end;function a:GivePromise(i)if not i:IsPending()then return i end;local j=i.resolved(i)local k=self:GiveTask(j)j:Finally(function()self[k]=nil end)return j end;function a:DoCleaning()local e=self._tasks;for c,g in pairs(e)do if typeof(g)=="RBXScriptConnection"then e[c]=nil;g:Disconnect()end end;local c,g=next(e)while g~=nil do e[c]=nil;if type(g)=="function"then g()elseif typeof(g)=="RBXScriptConnection"then g:Disconnect()elseif g.Destroy then g:Destroy()end;c,g=next(e)end end;local l=game:GetService("HttpService")local m=false;local n={}n.__index=n;n.ClassName="Signal"function n.new()local self=setmetatable({},n)self._bindableEvent=Instance.new("BindableEvent")self._argMap={}self._source=m and debug.traceback()or""self._bindableEvent.Event:Connect(function(o)self._argMap[o]=nil;if not self._bindableEvent and not next(self._argMap)then self._argMap=nil end end)return self end;function n:Fire(...)if not self._bindableEvent then warn(("Signal is already destroyed. %s"):format(self._source))return end;local p=table.pack(...)local o=l:GenerateGUID(false)self._argMap[o]=p;self._bindableEvent:Fire(o)end;function n:Connect(q)if not(type(q)=="function")then error(("connect(%s)"):format(typeof(q)),2)end;return self._bindableEvent.Event:Connect(function(o)local p=self._argMap[o]if p then q(table.unpack(p,1,p.n))else error("Missing arg data, probably due to reentrance.")end end)end;function n:Wait()local o=self._bindableEvent.Event:Wait()local p=self._argMap[o]if p then return table.unpack(p,1,p.n)else error("Missing arg data, probably due to reentrance.")return nil end end;function n:Destroy()if self._bindableEvent then self._bindableEvent:Destroy()self._bindableEvent=nil end;setmetatable(self,nil)end;local r={}local s=string.format;function r:sendNotif(t,u,v,w,x,y)game:GetService("StarterGui"):SetCore("SendNotification",{Title="Animator",Text=t.."\nBy hayper#0001"or nil,Icon=u or nil,Duration=v or nil,Button1=w or nil,Button2=x or nil,Callback=y or nil})end;function r:convertEnum(z)local A=tostring(z):split(".")if A[1]=="Enum"then local B=A[2]local C=A[3]local D={["PoseEasingDirection"]="EasingDirection",["PoseEasingStyle"]="EasingStyle"}if D[B]then return Enum[D[B]][C]else return z end else return z end end;function r:getMotors(E)if not E:IsA("Player")then error(s("invalid argument 1 to 'getMotors' (Player expected, got %s)",E.ClassName))end;local F={}for G,H in next,E.Character:GetDescendants()do if H:IsA("Motor6D")and H.Part0~=nil and H.Part1~=nil then table.insert(F,H)end end;return F end;local I={}function I:parsePoseData(J)if not J:IsA("Pose")then error(s("invalid argument 1 to '_parsePoseData' (Pose expected, got %s)",J.ClassName))end;local K={Name=J.Name,CFrame=J.CFrame,EasingDirection=r:convertEnum(J.EasingDirection),EasingStyle=r:convertEnum(J.EasingStyle),Weight=J.Weight}if#J:GetChildren()>0 then K.Subpose={}for G,B in next,J:GetChildren()do if B:IsA("Pose")then table.insert(K.Subpose,I:parsePoseData(B))end end end;return K end;function I:parseKeyframeData(L)if not L:IsA("Keyframe")then error(s("invalid argument 1 to '_parseKeyframeData' (Keyframe expected, got %s)",L.ClassName))end;local M={Name=L.Name,Time=L.Time,Pose={}}for G,B in next,L:GetChildren()do if B:IsA("Pose")then table.insert(M.Pose,I:parsePoseData(B))elseif B:IsA("KeyframeMarker")then if not M.Marker then M.Marker={}end;if not M.Marker[B.Name]then M.Marker[B.Name]={}end;table.insert(M.Marker,B.Name)end end;return M end;function I:parseAnimationData(N)if not N:IsA("KeyframeSequence")then error(s("invalid argument 1 to 'parseAnimationData' (KeyframeSequence expected, got %s)",N.ClassName))end;local O={Loop=N.Loop,Priority=N.Priority,Frames={}}for G,P in next,N:GetChildren()do if P:IsA("Keyframe")then table.insert(O.Frames,I:parseKeyframeData(P))end end;table.sort(O.Frames,function(Q,R)return Q.Time<R.Time end)return O end;local S=game:GetService("TweenService")local T=game:GetService("RunService")local U={AnimationData={},Player=nil,Looped=false,Length=0,Speed=1,IsPlaying=false,_stopFadeTime=0.100000001,_playing=false,_stopped=false,_isLooping=false,_markerSignal={}}U.__index=U;function U.new(E,V)if not E:IsA("Player")then error(s("invalid argument 1 to 'new' (Player expected, got %s)",E.ClassName))end;local W=setmetatable({},U)W.Player=E;if typeof(V)=="string"or typeof(V)=="number"then local X=game:GetObjects("rbxassetid://"..tostring(V))[1]if not X:IsA("KeyframeSequence")then error("invalid argument 1 to 'new' (AnimationID expected)")end;W.AnimationData=I:parseAnimationData(X)elseif typeof(V)=="table"then W.AnimationData=V elseif typeof(V)=="Instance"and V:IsA("KeyframeSequence")then W.AnimationData=I:parseAnimationData(V)elseif typeof(V)=="Instance"and V:IsA("Animation")then local X=game:GetObjects(V.AnimationId)[1]if not X:IsA("KeyframeSequence")then error("invalid argument 1 to 'new' (AnimationID inside Animation expected)")end;W.AnimationData=I:parseAnimationData(X)else error(s("invalid argument 2 to 'new' (number,string,KeyframeSequence expected, got %s)",E.ClassName))end;W.Looped=W.AnimationData.Looped;W.Length=W.AnimationData.Frames[#W.AnimationData.Frames].Time;W.DidLoop=n.new()W.Stopped=n.new()W.KeyframeReached=n.new()W._maid=a.new()W._maid:GiveTask(W.DidLoop)W._maid:GiveTask(W.Stopped)W._maid:GiveTask(W.KeyframeReached)return W end;function U:_playPose(J,Y,Z)local _=r:getMotors(self.Player)if J.Subpose then for G,a0 in next,J.Subpose do self:_playPose(a0,J,Z)end end;if Y then for G,a1 in next,_ do if a1.Part0.Name==Y.Name and a1.Part1.Name==J.Name then if Z>0 then local a2=TweenInfo.new(Z,J.EasingStyle,J.EasingDirection)if self._stopped~=true then S:Create(a1,a2,{Transform=J.CFrame}):Play()end else a1.Transform=J.CFrame end end end else if self.Player.Character[J.Name]then self.Player.Character[J.Name].CFrame=self.Player.Character[J.Name].CFrame*J.CFrame end end end;function U:Play(a3,a4,a5)a3=a3 or 0.100000001;if self._playing==false or self._isLooping==true then self._playing=true;self._isLooping=false;self.IsPlaying=true;local a6=self.Player.Character;if a6.Humanoid:FindFirstChild("Animator")then a6.Humanoid.Animator:Destroy()end;local a7=os.clock()coroutine.wrap(function()for H,P in next,self.AnimationData.Frames do P.Time=P.Time/self.Speed;if H~=1 and P.Time>os.clock()-a7 then repeat T.RenderStepped:Wait()until os.clock()-a7>P.Time or self._stopped==true end;if self._stopped==true then break end;if P.Name~="Keyframe"then self.KeyframeReached:Fire(P.Name)end;if P["Marker"]then for a8,C in next,P["Marker"]do if self._markerSignal[a8]then self._markerSignal[a8]:Fire(C)end end end;if P.Pose then for G,B in next,P.Pose do a3=a3+P.Time;if H~=1 then a3=(P.Time*self.Speed-self.AnimationData.Frames[H-1].Time)/(a5 or self.Speed)end;self:_playPose(B,nil,a3)end end end;if self.Looped==true and self._stopped~=true then self.DidLoop:Fire()self._isLooping=true;return self:Play(a3,a4,a5)end;T.RenderStepped:Wait()for G,R in next,r:getMotors(self.Player)do if self._stopFadeTime>0 then S:Create(R,TweenInfo.new(self._stopFadeTime,Enum.EasingStyle.Quad,Enum.EasingDirection.In),{Transform=CFrame.new(),CurrentAngle=0}):Play()else R.CurrentAngle=0;R.Transform=CFrame.new()end end;if not a6.Humanoid:FindFirstChild("Animator")then Instance.new("Animator",a6.Humanoid)end;self._stopped=false;self._playing=false;self.IsPlaying=false;self.Stopped:Fire()end)()end end;function U:GetTimeOfKeyframe(a9)for G,P in next,self.AnimationData.Frames do if P.Name==a9 then return P.Time end end;return math.huge end;function U:GetMarkerReachedSignal(aa)if not self._markerSignal[aa]then self._markerSignal[aa]=n.new()self._maid:GiveTask(self._markerSignal[aa])end;return self._markerSignal[aa]end;function U:AdjustSpeed(a5)self.Speed=a5 end;function U:Stop(a3)self._stopFadeTime=a3 or 0.100000001;self._stopped=true end;function U:Destroy()self:Stop(0)self.Stopped:Wait()self._maid:Destroy()self=nil end;local ab=game:GetService("Players")local E=ab.LocalPlayer;getgenv().Animator=U;getgenv().hookAnimatorFunction=function()local ac;ac=hookmetamethod(game,"__namecall",function(ad,...)local ae=getnamecallmethod()if ad.ClassName=="Humanoid"and ad.Parent==E.Character and ae=="LoadAnimation"and checkcaller()then return U.new(E,...)end;return ac(ad,...)end)r:sendNotif("Hook Loaded\nby whited#4382",nil,5)end;r:sendNotif("API Loaded",nil,5)end