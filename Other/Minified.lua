if getgenv()["Animator"]==nil then local a=game:GetService("HttpService")local b=false;local c={}c.__index=c;c.ClassName="Signal"function c.new()local self=setmetatable({},c)self._bindableEvent=Instance.new("BindableEvent")self._argMap={}self._source=b and debug.traceback()or""self._bindableEvent.Event:Connect(function(d)self._argMap[d]=nil;if not self._bindableEvent and not next(self._argMap)then self._argMap=nil end end)return self end;function c:Fire(...)if not self._bindableEvent then warn(("Signal is already destroyed. %s"):format(self._source))return end;local e=table.pack(...)local d=a:GenerateGUID(false)self._argMap[d]=e;self._bindableEvent:Fire(d)end;function c:Connect(f)if not(type(f)=="function")then error(("connect(%s)"):format(typeof(f)),2)end;return self._bindableEvent.Event:Connect(function(d)local e=self._argMap[d]if e then f(table.unpack(e,1,e.n))else error("Missing arg data, probably due to reentrance.")end end)end;function c:Wait()local d=self._bindableEvent.Event:Wait()local e=self._argMap[d]if e then return table.unpack(e,1,e.n)else error("Missing arg data, probably due to reentrance.")return nil end end;function c:Destroy()if self._bindableEvent then self._bindableEvent:Destroy()self._bindableEvent=nil end;setmetatable(self,nil)end;local g={}local h=string.format;function g:sendNotif(i,j,k,l,m,n)game:GetService("StarterGui"):SetCore("SendNotification",{Title="Animator",Text=i.."\nBy hayper#0001"or nil,Icon=j or nil,Duration=k or nil,Button1=l or nil,Button2=m or nil,Callback=n or nil})end;function g:convertEnum(o)local p=tostring(o):split(".")if p[1]=="Enum"then local q=p[2]local r=p[3]local s={["PoseEasingDirection"]="EasingDirection",["PoseEasingStyle"]="EasingStyle"}if s[q]then return Enum[s[q]][r]else return o end else return o end end;function g:getMotors(t,u)u=u or{}if not t:IsA("Player")then error(h("invalid argument 1 to 'getMotors' (Player expected, got %s)",t.ClassName))end;if typeof(u)~="table"then error(h("invalid argument 1 to 'getMotors' (Table expected, got %s)",typeof(u)))end;local v={}for w,x in next,t.Character:GetDescendants()do if x:IsA("Motor6D")and x.Part0~=nil and x.Part1~=nil then for w,y in next,u do if typeof(y)=="Instance"then if x:IsDescendantOf(y) then continue end end end;table.insert(v,x)end end;return v end;local z={}function z:parsePoseData(A)if not A:IsA("Pose")then error(h("invalid argument 1 to '_parsePoseData' (Pose expected, got %s)",A.ClassName))end;local B={Name=A.Name,CFrame=A.CFrame,EasingDirection=g:convertEnum(A.EasingDirection),EasingStyle=g:convertEnum(A.EasingStyle),Weight=A.Weight}if#A:GetChildren()>0 then B.Subpose={}for w,q in next,A:GetChildren()do if q:IsA("Pose")then table.insert(B.Subpose,z:parsePoseData(q))end end end;return B end;function z:parseKeyframeData(C)if not C:IsA("Keyframe")then error(h("invalid argument 1 to '_parseKeyframeData' (Keyframe expected, got %s)",C.ClassName))end;local D={Name=C.Name,Time=C.Time,Pose={}}for w,q in next,C:GetChildren()do if q:IsA("Pose")then table.insert(D.Pose,z:parsePoseData(q))elseif q:IsA("KeyframeMarker")then if not D.Marker then D.Marker={}end;if not D.Marker[q.Name]then D.Marker[q.Name]={}end;table.insert(D.Marker,q.Name)end end;return D end;function z:parseAnimationData(E)if not E:IsA("KeyframeSequence")then error(h("invalid argument 1 to 'parseAnimationData' (KeyframeSequence expected, got %s)",E.ClassName))end;local F={Loop=E.Loop,Priority=E.Priority,Frames={}}for w,G in next,E:GetChildren()do if G:IsA("Keyframe")then table.insert(F.Frames,z:parseKeyframeData(G))end end;table.sort(F.Frames,function(H,I)return H.Time<I.Time end)return F end;local J=game:GetService("TweenService")local K=game:GetService("RunService")local L={AnimationData={},_motorIgnoreList={},Player=nil,Looped=false,Length=0,Speed=1,IsPlaying=false,_stopFadeTime=0.100000001,_playing=false,_stopped=false,_isLooping=false,_markerSignal={}}L.__index=L;function L.new(t,M)if not t:IsA("Player")then error(h("invalid argument 1 to 'new' (Player expected, got %s)",t.ClassName))end;local N=setmetatable({},L)N.Player=t;if typeof(M)=="string"or typeof(M)=="number"then local O=game:GetObjects("rbxassetid://"..tostring(M))[1]if not O:IsA("KeyframeSequence")then error("invalid argument 1 to 'new' (AnimationID expected)")end;N.AnimationData=z:parseAnimationData(O)elseif typeof(M)=="table"then N.AnimationData=M elseif typeof(M)=="Instance"and M:IsA("KeyframeSequence")then N.AnimationData=z:parseAnimationData(M)elseif typeof(M)=="Instance"and M:IsA("Animation")then local O=game:GetObjects(M.AnimationId)[1]if not O:IsA("KeyframeSequence")then error("invalid argument 1 to 'new' (AnimationID inside Animation expected)")end;N.AnimationData=z:parseAnimationData(O)else error(h("invalid argument 2 to 'new' (number,string,KeyframeSequence expected, got %s)",t.ClassName))end;N.Looped=N.AnimationData.Looped;N.Length=N.AnimationData.Frames[#N.AnimationData.Frames].Time;N.DidLoop=c.new()N.Stopped=c.new()N.KeyframeReached=c.new()return N end;function L:_playPose(A,P,Q)local R=g:getMotors(self.Player,self._motorIgnoreList)if A.Subpose then for w,S in next,A.Subpose do self:_playPose(S,A,Q)end end;if P then for w,T in next,R do if T.Part0.Name==P.Name and T.Part1.Name==A.Name then if Q>0 then local U=TweenInfo.new(Q,A.EasingStyle,A.EasingDirection)if self._stopped~=true then J:Create(T,U,{Transform=A.CFrame}):Play()end else T.Transform=A.CFrame end end end else if self.Player.Character[A.Name]then self.Player.Character[A.Name].CFrame=self.Player.Character[A.Name].CFrame*A.CFrame end end end;function L:Play(V,W,X)V=V or 0.100000001;if self._playing==false or self._isLooping==true then self._playing=true;self._isLooping=false;self.IsPlaying=true;local Y=self.Player.Character;if Y:FindFirstChildOfClass("Humanoid")then if Y.Humanoid:FindFirstChildOfClass("Animator")then Y.Humanoid.Animator:Destroy()end end;local Z=os.clock()coroutine.wrap(function()for x,G in next,self.AnimationData.Frames do G.Time=G.Time/self.Speed;if x~=1 and G.Time>os.clock()-Z then repeat K.RenderStepped:Wait()until os.clock()-Z>G.Time or self._stopped==true end;if self._stopped==true then break end;if G.Name~="Keyframe"then self.KeyframeReached:Fire(G.Name)end;if G["Marker"]then for _,r in next,G["Marker"]do if self._markerSignal[_]then self._markerSignal[_]:Fire(r)end end end;if G.Pose then for w,q in next,G.Pose do V=V+G.Time;if x~=1 then V=(G.Time*self.Speed-self.AnimationData.Frames[x-1].Time)/(X or self.Speed)end;self:_playPose(q,nil,V)end end end;if self.Looped==true and self._stopped~=true then self.DidLoop:Fire()self._isLooping=true;return self:Play(V,W,X)end;K.RenderStepped:Wait()for w,I in next,g:getMotors(self.Player,self._motorIgnoreList)do if self._stopFadeTime>0 then J:Create(I,TweenInfo.new(self._stopFadeTime,Enum.EasingStyle.Quad,Enum.EasingDirection.In),{Transform=CFrame.new(),CurrentAngle=0}):Play()else I.CurrentAngle=0;I.Transform=CFrame.new()end end;if Y:FindFirstChildOfClass("Humanoid")then if not Y.Humanoid:FindFirstChildOfClass("Animator")then Instance.new("Animator",Y.Humanoid)end else self:Destroy()end;self._stopped=false;self._playing=false;self.IsPlaying=false;self.Stopped:Fire()end)()end end;function L:IgnoreMotorIn(a0)if typeof(a0)~="table"then error(h("invalid argument 1 to 'IgnoreMotorIn' (Table expected, got %s)",typeof(a0)))end;self._motorIgnoreList=a0 end;function L:GetMotorIgnoreList()return self._motorIgnoreList end;function L:GetTimeOfKeyframe(a1)for w,G in next,self.AnimationData.Frames do if G.Name==a1 then return G.Time end end;return math.huge end;function L:GetMarkerReachedSignal(a2)if not self._markerSignal[a2]then self._markerSignal[a2]=c.new()end;return self._markerSignal[a2]end;function L:AdjustSpeed(X)self.Speed=X end;function L:Stop(V)self._stopFadeTime=V or 0.100000001;self._stopped=true end;function L:Destroy()self:Stop(0)self.Stopped:Wait()self.DidLoop:Destroy()self.Stopped:Destroy()self.KeyframeReached:Destroy()for w,a3 in next,self._markerSignal do a3:Destroy()end;setmetatable(self,nil)end;local a4=game:GetService("Players")local t=a4.LocalPlayer;getgenv().Animator=L;getgenv().hookAnimatorFunction=function()local a5;a5=hookmetamethod(game,"__namecall",function(a6,...)local a7=getnamecallmethod()if a6.ClassName=="Humanoid"and a6.Parent==t.Character and a7=="LoadAnimation"and checkcaller()then return L.new(t,...)end;return a5(a6,...)end)g:sendNotif("Hook Loaded\nby whited#4382",nil,5)end;g:sendNotif("API Loaded",nil,5)end