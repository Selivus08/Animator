if getgenv()["Animator"]==nil then local a=game:GetService("HttpService")local b=false;local c={}c.__index=c;c.ClassName="Signal"function c.new()local self=setmetatable({},c)self._bindableEvent=Instance.new("BindableEvent")self._argMap={}self._source=b and debug.traceback()or""self._bindableEvent.Event:Connect(function(d)self._argMap[d]=nil;if not self._bindableEvent and not next(self._argMap)then self._argMap=nil end end)return self end;function c:Fire(...)if not self._bindableEvent then warn(("Signal is already destroyed. %s"):format(self._source))return end;local e=table.pack(...)local d=a:GenerateGUID(false)self._argMap[d]=e;self._bindableEvent:Fire(d)end;function c:Connect(f)if not(type(f)=="function")then error(("connect(%s)"):format(typeof(f)),2)end;return self._bindableEvent.Event:Connect(function(d)local e=self._argMap[d]if e then f(table.unpack(e,1,e.n))else error("Missing arg data, probably due to reentrance.")end end)end;function c:Wait()local d=self._bindableEvent.Event:Wait()local e=self._argMap[d]if e then return table.unpack(e,1,e.n)else error("Missing arg data, probably due to reentrance.")return nil end end;function c:Destroy()if self._bindableEvent then self._bindableEvent:Destroy()self._bindableEvent=nil end;setmetatable(self,nil)end;local g={}local h=string.format;function g:sendNotif(i,j,k,l,m,n)game:GetService("StarterGui"):SetCore("SendNotification",{Title="Animator",Text=i.."\nBy hayper#0001"or nil,Icon=j or nil,Duration=k or nil,Button1=l or nil,Button2=m or nil,Callback=n or nil})end;function g:convertEnum(o)local p=tostring(o):split(".")if p[1]=="Enum"then local q=p[2]local r=p[3]local s={["PoseEasingDirection"]="EasingDirection",["PoseEasingStyle"]="EasingStyle"}if s[q]then return Enum[s[q]][r]else return o end else return o end end;function g:getBones(t,u)u=u or{}if typeof(t)~="Instance"then error(h("invalid argument 1 to 'getBones' (Instance expected, got %s)",typeof(t)))end;if typeof(u)~="table"then error(h("invalid argument 1 to 'getBones' (Table expected, got %s)",typeof(u)))end;local v={}for w,x in next,t:GetDescendants()do if x:IsA("Bone")then local y=false;for w,z in next,u do if typeof(z)=="Instance"and x:IsDescendantOf(z)then y=true;break end end;if y~=true then table.insert(v,x)end end end;return v end;function g:getMotors(t,u)u=u or{}if typeof(t)~="Instance"then error(h("invalid argument 1 to 'getMotors' (Instance expected, got %s)",typeof(t)))end;if typeof(u)~="table"then error(h("invalid argument 1 to 'getMotors' (Table expected, got %s)",typeof(u)))end;local A={}for w,x in next,t:GetDescendants()do if x:IsA("Motor6D")and x.Part0~=nil and x.Part1~=nil then local y=false;for w,z in next,u do if typeof(z)=="Instance"and x:IsDescendantOf(z)then y=true;break end end;if y~=true then table.insert(A,x)end end end;return A end;local B={}function B:parsePoseData(C)if not C:IsA("Pose")then error(h("invalid argument 1 to '_parsePoseData' (Pose expected, got %s)",C.ClassName))end;local D={Name=C.Name,CFrame=C.CFrame,EasingDirection=g:convertEnum(C.EasingDirection),EasingStyle=g:convertEnum(C.EasingStyle),Weight=C.Weight}if#C:GetChildren()>0 then D.Subpose={}for w,q in next,C:GetChildren()do if q:IsA("Pose")then table.insert(D.Subpose,B:parsePoseData(q))end end end;return D end;function B:parseKeyframeData(E)if not E:IsA("Keyframe")then error(h("invalid argument 1 to '_parseKeyframeData' (Keyframe expected, got %s)",E.ClassName))end;local F={Name=E.Name,Time=E.Time,Pose={}}for w,q in next,E:GetChildren()do if q:IsA("Pose")then table.insert(F.Pose,B:parsePoseData(q))elseif q:IsA("KeyframeMarker")then if not F["Marker"]then F.Marker={}end;if not F.Marker[q.Name]then F.Marker[q.Name]={}end;table.insert(F.Marker,q.Name)end end;return F end;function B:parseAnimationData(G)if not G:IsA("KeyframeSequence")then error(h("invalid argument 1 to 'parseAnimationData' (KeyframeSequence expected, got %s)",G.ClassName))end;local H={Loop=G.Loop,Priority=G.Priority,Frames={}}for w,I in next,G:GetChildren()do if I:IsA("Keyframe")then table.insert(H.Frames,B:parseKeyframeData(I))end end;table.sort(H.Frames,function(J,K)return J.Time<K.Time end)return H end;local L=game:GetService("RunService")local M=game:GetService("TweenService")local N={AnimationData={},handleVanillaAnimator=true,Character=nil,Looped=false,Length=0,Speed=1,IsPlaying=false,_motorIgnoreList={},_stopFadeTime=0.100000001,_playing=false,_stopped=false,_isLooping=false,_markerSignal={},_boneIgnoreList={}}local O,P=CFrame.new,CFrame.Angles;local Q=math.deg;local R=os.clock;local S=O()local T=O(0,0,0)*P(Q(0),Q(0),Q(0))N.__index=N;function N.new(t,U)if typeof(t)~="Instance"then error(h("invalid argument 1 to 'new' (Instace expected, got %s)",typeof(t)))end;local V=setmetatable({},N)V.Character=t;if typeof(U)=="string"or typeof(U)=="number"then local W=game:GetObjects("rbxassetid://"..tostring(U))[1]if not W:IsA("KeyframeSequence")then error("invalid argument 1 to 'new' (AnimationID expected)")end;V.AnimationData=B:parseAnimationData(W)elseif typeof(U)=="table"then V.AnimationData=U elseif typeof(U)=="Instance"and U:IsA("KeyframeSequence")then V.AnimationData=B:parseAnimationData(U)elseif typeof(U)=="Instance"and U:IsA("Animation")then local W=game:GetObjects(U.AnimationId)[1]if not W:IsA("KeyframeSequence")then error("invalid argument 1 to 'new' (AnimationID inside Animation expected)")end;V.AnimationData=B:parseAnimationData(W)else error(h("invalid argument 2 to 'new' (number,string,table,Instance expected, got %s)",typeof(U)))end;V.Looped=V.AnimationData.Loop;V.Length=V.AnimationData.Frames[#V.AnimationData.Frames].Time;V.DidLoop=c.new()V.Stopped=c.new()V.KeyframeReached=c.new()return V end;function N:IgnoreMotorIn(X)if typeof(X)~="table"then error(h("invalid argument 1 to 'IgnoreMotorIn' (Table expected, got %s)",typeof(X)))end;self._motorIgnoreList=X end;function N:GetMotorIgnoreList()return self._motorIgnoreList end;function N:IgnoreBoneIn(X)if typeof(X)~="table"then error(h("invalid argument 1 to 'IgnoreBoneIn' (Table expected, got %s)",typeof(X)))end;self._boneIgnoreList=X end;function N:GetBoneIgnoreList()return self._boneIgnoreList end;function N:_playPose(C,Y,Z)local A=g:getMotors(self.Character,self._motorIgnoreList)local v=g:getBones(self.Character,self._boneIgnoreList)if C.Subpose then for w,_ in next,C.Subpose do self:_playPose(_,C,Z)end end;if not Y then return end;local a0=TweenInfo.new(Z,C.EasingStyle,C.EasingDirection)coroutine.wrap(function()for w,a1 in next,A do if a1.Part0.Name==Y.Name and a1.Part1.Name==C.Name then if self==nil or self._stopped==true then break end;if Z>0 then M:Create(a1,a0,{Transform=C.CFrame}):Play()else a1.Transform=C.CFrame end end end end)()coroutine.wrap(function()for w,a2 in next,v do if Y.Name==a2.Parent.Name and a2.Name==C.Name then if self==nil or self._stopped==true then break end;if Z>0 then M:Create(a2,a0,{Transform=C.CFrame}):Play()else a2.Transform=C.CFrame end end end end)end;function N:Play(a3,a4,a5)a3=a3 or 0.100000001;if self._playing==false or self._isLooping==true then self._playing=true;self._isLooping=false;self.IsPlaying=true;local a6;if self.Character:FindFirstChild("Humanoid")then a6=self.Character.Humanoid.Died:Connect(function()self=nil;a6:Disconnect()end)if self.Character.Humanoid:FindFirstChild("Animator")and self.handleVanillaAnimator==true then self.Character.Humanoid.Animator:Destroy()end end;local a7;a7=self.Character:GetPropertyChangedSignal("Parent"):Connect(function()if self==nil or self.Character.Parent==nil then self=nil;a7:Disconnect()end end)if self~=nil and self.Character.Parent~=nil then local a8=R()coroutine.wrap(function()for x,I in next,self.AnimationData.Frames do if self==nil or self._stopped==true then break end;local a9=I.Time/(a5 or self.Speed)if I.Name~="Keyframe"then self.KeyframeReached:Fire(I.Name)end;if I["Marker"]then for aa,r in next,I.Marker do if self._markerSignal[aa]then self._markerSignal[aa]:Fire(r)end end end;if I.Pose then for w,q in next,I.Pose do local ab=0;if x~=1 then ab=(a9*(a5 or self.Speed)-self.AnimationData.Frames[x-1].Time)/(a5 or self.Speed)end;self:_playPose(q,nil,ab)end end;if a9>R()-a8 then repeat L.RenderStepped:Wait()until self==nil or self._stopped==true or R()-a8>=a9 end end;if self==nil then return end;L.RenderStepped:Wait()if self.Looped==true and self._stopped~=true then self.DidLoop:Fire()self._isLooping=true;return self:Play(a3,a4,a5)end;local a0=TweenInfo.new(self._stopFadeTime,Enum.EasingStyle.Quad,Enum.EasingDirection.In)for w,K in next,g:getMotors(self.Character,self._motorIgnoreList)do if self._stopFadeTime>0 then M:Create(K,a0,{Transform=S,CurrentAngle=0}):Play()else K.CurrentAngle=0;K.Transform=S end end;for w,ac in next,g:getBones(self.Character,self._boneIgnoreList)do if self._stopFadeTime>0 then M:Create(ac,a0,{Transform=T}):Play()else ac.Transform=T end end;if self.Character:FindFirstChildOfClass("Humanoid")and not self.Character.Humanoid:FindFirstChildOfClass("Animator")and self.handleVanillaAnimator==true then Instance.new("Animator",self.Character.Humanoid)end;if a6 then a6:Disconnect()end;a7:Disconnect()self._stopped=false;self._playing=false;self.IsPlaying=false;self.Stopped:Fire()end)()end end end;function N:GetTimeOfKeyframe(ad)for w,I in next,self.AnimationData.Frames do if I.Name==ad then return I.Time end end;return math.huge end;function N:GetMarkerReachedSignal(ae)if not self._markerSignal[ae]then self._markerSignal[ae]=c.new()end;return self._markerSignal[ae]end;function N:AdjustSpeed(a5)self.Speed=a5 end;function N:Stop(a3)self._stopFadeTime=a3 or 0.100000001;self._stopped=true end;function N:Destroy()self:Stop(0)self.Stopped:Wait()self.DidLoop:Destroy()self.DidLoop=nil;self.Stopped:Destroy()self.Stopped=nil;self.KeyframeReached:Destroy()self.KeyframeReached=nil;for w,af in next,self._markerSignal do af:Destroy()af=nil end;self=nil end;getgenv().Animator=N;getgenv().hookAnimatorFunction=function()local ag;ag=hookmetamethod(game,"__namecall",function(ah,...)local ai=getnamecallmethod()if ah.ClassName=="Humanoid"and ai=="LoadAnimation"and checkcaller()then local e={...}if not e[2]or e[2]and e[2]~=true then return N.new(ah.Parent,...)end end;return ag(ah,...)end)g:sendNotif("Hook Loaded\nby whited#4382",nil,5)end;g:sendNotif("API Loaded",nil,5)end