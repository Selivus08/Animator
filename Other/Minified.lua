if getgenv()["Animator"]==nil then local a=game:GetService("HttpService")local b=false;local c={}c.__index=c;c.ClassName="Signal"function c.new()local self=setmetatable({},c)self._bindableEvent=Instance.new("BindableEvent")self._argMap={}self._source=b and debug.traceback()or""self._bindableEvent.Event:Connect(function(d)self._argMap[d]=nil;if not self._bindableEvent and not next(self._argMap)then self._argMap=nil end end)return self end;function c:Fire(...)if not self._bindableEvent then warn(("Signal is already destroyed. %s"):format(self._source))return end;local e=table.pack(...)local d=a:GenerateGUID(false)self._argMap[d]=e;self._bindableEvent:Fire(d)end;function c:Connect(f)if not(type(f)=="function")then error(("connect(%s)"):format(typeof(f)),2)end;return self._bindableEvent.Event:Connect(function(d)local e=self._argMap[d]if e then f(table.unpack(e,1,e.n))else error("Missing arg data, probably due to reentrance.")end end)end;function c:Wait()local d=self._bindableEvent.Event:Wait()local e=self._argMap[d]if e then return table.unpack(e,1,e.n)else error("Missing arg data, probably due to reentrance.")return nil end end;function c:Destroy()if self._bindableEvent then self._bindableEvent:Destroy()self._bindableEvent=nil end;setmetatable(self,nil)end;local g={}local h=string.format;function g:sendNotif(i,j,k,l,m,n)game:GetService("StarterGui"):SetCore("SendNotification",{Title="Animator",Text=i.."\nBy hayper#0001"or nil,Icon=j or nil,Duration=k or nil,Button1=l or nil,Button2=m or nil,Callback=n or nil})end;function g:convertEnum(o)local p=tostring(o):split(".")if p[1]=="Enum"then local q=p[2]local r=p[3]local s={["PoseEasingDirection"]="EasingDirection",["PoseEasingStyle"]="EasingStyle"}if s[q]then return Enum[s[q]][r]else return o end else return o end end;function g:getMotors(t)if not t:IsA("Player")then error(h("invalid argument 1 to 'getMotors' (Player expected, got %s)",t.ClassName))end;local u={}for v,w in next,t.Character:GetDescendants()do if w:IsA("Motor6D")and w.Part0~=nil and w.Part1~=nil then table.insert(u,w)end end;return u end;local x={}function x:parsePoseData(y)if not y:IsA("Pose")then error(h("invalid argument 1 to '_parsePoseData' (Pose expected, got %s)",y.ClassName))end;local z={Name=y.Name,CFrame=y.CFrame,EasingDirection=g:convertEnum(y.EasingDirection),EasingStyle=g:convertEnum(y.EasingStyle),Weight=y.Weight}if#y:GetChildren()>0 then z.Subpose={}for v,q in next,y:GetChildren()do if q:IsA("Pose")then table.insert(z.Subpose,x:parsePoseData(q))end end end;return z end;function x:parseKeyframeData(A)if not A:IsA("Keyframe")then error(h("invalid argument 1 to '_parseKeyframeData' (Keyframe expected, got %s)",A.ClassName))end;local B={Name=A.Name,Time=A.Time,Pose={}}for v,q in next,A:GetChildren()do if q:IsA("Pose")then table.insert(B.Pose,x:parsePoseData(q))elseif q:IsA("KeyframeMarker")then if not B.Marker then B.Marker={}end;if not B.Marker[q.Name]then B.Marker[q.Name]={}end;table.insert(B.Marker,q.Name)end end;return B end;function x:parseAnimationData(C)if not C:IsA("KeyframeSequence")then error(h("invalid argument 1 to 'parseAnimationData' (KeyframeSequence expected, got %s)",C.ClassName))end;local D={Loop=C.Loop,Priority=C.Priority,Frames={}}for v,E in next,C:GetChildren()do if E:IsA("Keyframe")then table.insert(D.Frames,x:parseKeyframeData(E))end end;table.sort(D.Frames,function(F,G)return F.Time<G.Time end)return D end;local H=game:GetService("TweenService")local I=game:GetService("RunService")local J={AnimationData={},Player=nil,Looped=false,Length=0,Speed=1,IsPlaying=false,_stopFadeTime=0.100000001,_playing=false,_stopped=false,_isLooping=false,_markerSignal={}}J.__index=J;function J.new(t,K)if not t:IsA("Player")then error(h("invalid argument 1 to 'new' (Player expected, got %s)",t.ClassName))end;local L=setmetatable({},J)L.Player=t;if typeof(K)=="string"or typeof(K)=="number"then local M=game:GetObjects("rbxassetid://"..tostring(K))[1]if not M:IsA("KeyframeSequence")then error("invalid argument 1 to 'new' (AnimationID expected)")end;L.AnimationData=x:parseAnimationData(M)elseif typeof(K)=="table"then L.AnimationData=K elseif typeof(K)=="Instance"and K:IsA("KeyframeSequence")then L.AnimationData=x:parseAnimationData(K)elseif typeof(K)=="Instance"and K:IsA("Animation")then local M=game:GetObjects(K.AnimationId)[1]if not M:IsA("KeyframeSequence")then error("invalid argument 1 to 'new' (AnimationID inside Animation expected)")end;L.AnimationData=x:parseAnimationData(M)else error(h("invalid argument 2 to 'new' (number,string,KeyframeSequence expected, got %s)",t.ClassName))end;L.Looped=L.AnimationData.Looped;L.Length=L.AnimationData.Frames[#L.AnimationData.Frames].Time;L.DidLoop=c.new()L.Stopped=c.new()L.KeyframeReached=c.new()return L end;function J:_playPose(y,N,O)local P=g:getMotors(self.Player)if y.Subpose then for v,Q in next,y.Subpose do self:_playPose(Q,y,O)end end;if N then for v,R in next,P do if R.Part0.Name==N.Name and R.Part1.Name==y.Name then if O>0 then local S=TweenInfo.new(O,y.EasingStyle,y.EasingDirection)if self._stopped~=true then H:Create(R,S,{Transform=y.CFrame}):Play()end else R.Transform=y.CFrame end end end else if self.Player.Character[y.Name]then self.Player.Character[y.Name].CFrame=self.Player.Character[y.Name].CFrame*y.CFrame end end end;function J:Play(T,U,V)T=T or 0.100000001;if self._playing==false or self._isLooping==true then self._playing=true;self._isLooping=false;self.IsPlaying=true;local W=self.Player.Character;if W.Humanoid:FindFirstChild("Animator")then W.Humanoid.Animator:Destroy()end;local X=os.clock()coroutine.wrap(function()for w,E in next,self.AnimationData.Frames do E.Time=E.Time/self.Speed;if w~=1 and E.Time>os.clock()-X then repeat I.RenderStepped:Wait()until os.clock()-X>E.Time or self._stopped==true end;if self._stopped==true then break end;if E.Name~="Keyframe"then self.KeyframeReached:Fire(E.Name)end;if E["Marker"]then for Y,r in next,E["Marker"]do if self._markerSignal[Y]then self._markerSignal[Y]:Fire(r)end end end;if E.Pose then for v,q in next,E.Pose do T=T+E.Time;if w~=1 then T=(E.Time*self.Speed-self.AnimationData.Frames[w-1].Time)/(V or self.Speed)end;self:_playPose(q,nil,T)end end end;if self.Looped==true and self._stopped~=true then self.DidLoop:Fire()self._isLooping=true;return self:Play(T,U,V)end;I.RenderStepped:Wait()for v,G in next,g:getMotors(self.Player)do if self._stopFadeTime>0 then H:Create(G,TweenInfo.new(self._stopFadeTime,Enum.EasingStyle.Quad,Enum.EasingDirection.In),{Transform=CFrame.new(),CurrentAngle=0}):Play()else G.CurrentAngle=0;G.Transform=CFrame.new()end end;if not W.Humanoid:FindFirstChild("Animator")then Instance.new("Animator",W.Humanoid)end;self._stopped=false;self._playing=false;self.IsPlaying=false;self.Stopped:Fire()end)()end end;function J:GetTimeOfKeyframe(Z)for v,E in next,self.AnimationData.Frames do if E.Name==Z then return E.Time end end;return math.huge end;function J:GetMarkerReachedSignal(_)if not self._markerSignal[_]then self._markerSignal[_]=c.new()end;return self._markerSignal[_]end;function J:AdjustSpeed(V)self.Speed=V end;function J:Stop(T)self._stopFadeTime=T or 0.100000001;self._stopped=true end;function J:Destroy()self:Stop(0)self.Stopped:Wait()self.DidLoop:Destroy()self.Stopped:Destroy()self.KeyframeReached:Destroy()setmetatable(self,nil)end;local a0=game:GetService("Players")local t=a0.LocalPlayer;getgenv().Animator=J;getgenv().hookAnimatorFunction=function()local a1;a1=hookmetamethod(game,"__namecall",function(a2,...)local a3=getnamecallmethod()if a2.ClassName=="Humanoid"and a2.Parent==t.Character and a3=="LoadAnimation"and checkcaller()then return J.new(t,...)end;return a1(a2,...)end)g:sendNotif("Hook Loaded\nby whited#4382",nil,5)end;g:sendNotif("API Loaded",nil,5)end